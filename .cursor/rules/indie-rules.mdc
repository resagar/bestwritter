---
description: 
globs: 
alwaysApply: true
---
### 🧩 Reglas para Cursor — Stack React + Next.js + Prisma + NestJS (sin tRPC)

**Lenguaje Base:** TypeScript

#### 📁 Estructura de carpetas recomendada

* `app/`: rutas y componentes de páginas (App Router)
* `components/`: UI reutilizable
* `lib/`: utilidades y helpers (validaciones, DB, auth, etc.)
* `server/`: lógica de backend (API routes, NestJS handlers)
* `types/`: tipos globales
* `styles/`: configuración global de estilos (Tailwind)

---

### ✅ Reglas de Estilo

#### 🔠 Tipado

* Habilitar `strict` en `tsconfig.json`
* Evitar `any`; prefiere `unknown`, `z.infer<typeof schema>`, o tipos definidos
* Centralizar tipos compartidos en `types/` o junto al schema correspondiente

#### 🔄 Validación

* Usa **Zod** para:

  * Validar formularios en frontend
  * Validar inputs en endpoints (`api/`) o servicios NestJS
* Componer esquemas por partes: `schemaBase`, `schemaCreate`, `schemaUpdate`

#### 📦 Componentes

* Componentes base UI (ej. `Button`, `Input`) van en `components/ui/`
* Prefiere server components cuando sea posible (menos JS en client)
* Usa `forwardRef` para compatibilidad con shadcn/ui o librerías externas

#### ⚙️ Backend (NestJS + Prisma)

* Usa NestJS como backend independiente o desde `/server/`
* Sigue el patrón: `Controller → Service → Repository`
* Prisma: crea un `lib/prisma.ts` singleton para evitar múltiples instancias

---

### 🧪 Formularios

* Usa **React Hook Form + Zod**:

  ```ts
  const form = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),
  });
  ```
* Para inputs no controlados, usa `Controller`

---

### 🧬 Autenticación

* Usa **NextAuth.js** con callbacks personalizados
* Autenticación JWT o basada en sesión (según preferencia)
* Obtén sesión con `useSession()` en client y `getServerSession()` en server

---

### 🎨 Estilos

* Usa **TailwindCSS** como sistema base
* shadcn/ui como librería de componentes accesibles y personalizables
* Íconos con Lucide: [https://lucide.dev](mdc:https:/lucide.dev)
* Anima con Framer Motion (solo client components)

---

### Commands

* Para instalaciones y comandos no uso npm uso pnpm y sus distintos comandos
* Para el caso de comandos de prisma se ejecutaran usando pnpm dlx <comando de prisma>
* Cuando se vaya a ejecutar un comando de prisma en el entorno de desarrollo hay que detener el servidor de desarrollo de next primero antes de ejecutar el comando de prisma

---

### 🔗 URLs oficiales de referencia (para la Sidebar de Cursor)

* Next.js: [https://nextjs.org/docs](mdc:https:/nextjs.org/docs)
* React: [https://react.dev](mdc:https:/react.dev)
* TailwindCSS: [https://tailwindcss.com/docs](mdc:https:/tailwindcss.com/docs)
* shadcn/ui: [https://ui.shadcn.com](mdc:https:/ui.shadcn.com)
* Prisma: [https://www.prisma.io/docs](mdc:https:/www.prisma.io/docs)
* NestJS: [https://docs.nestjs.com](mdc:https:/docs.nestjs.com)
* React Hook Form: [https://react-hook-form.com](mdc:https:/react-hook-form.com)
* Zod: [https://zod.dev](mdc:https:/zod.dev)
* NextAuth.js: [https://authjs.dev](mdc:https:/authjs.dev)
* Resend: [https://resend.com/docs](mdc:https:/resend.com/docs)
* React Email: [https://react.email/docs](mdc:https:/react.email/docs)
* Lucide Icons: [https://lucide.dev](mdc:https:/lucide.dev)
* Framer Motion: [https://www.framer.com/motion](mdc:https:/www.framer.com/motion)

